#: import hex kivy.utils.get_color_from_hex
#: import CardTransition kivy.uix.screenmanager.CardTransition
#: import images images
#: import CustomWidgets CustomWidgets
#: import Clipboard kivy.core.clipboard.Clipboard
#: import  config utils.ConfigParser
#: import  lang lang.Localization
<ScreenManagement>:
    id: manager
    ListsScreen:
    EntriesScreen:
    SettingsScreen:

<ListsScreen>:
    name: 'lists_screen'
    on_pre_enter: root.refresh_lists()
    # Main
    BoxLayout:
        orientation: 'vertical'

        # Upper Panel
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: 50
            size_hint: 1, 0.1
            spacing: 2

            Button:
                text: lang.get('settings_btn')
                font_size: config.get('font_size')
                on_release: root.manager.change_screen("settings_screen", "left")
                size_hint: 0.6, 1
            Button:
                id: lists_edit_btn
                text: lang.get('edit_btn')
                font_size: config.get('font_size')
                size_hint: 0.2, 1
                on_press: root.change_edit_mode()
                #disabled: True
            Button:
                text: lang.get('search_btn')
                font_size: config.get('font_size')
                size_hint: 0.2, 1
                disabled: True


        ScrollView:
            # Lists panel
            GridLayout:
                id: lists_panel_id
                cols: 1
                spacing: int(config.get('spacing'))
                padding: int(config.get('padding'))
                size_hint_y: None
                height: self.minimum_height

        # Bottom panel
        BoxLayout:
            orientation: 'horizontal'
            height: 50
            size_hint: 1, 0.07
            spacing: 2

            TextInput:
                id: add_list_input_id
                halign: "center"
                valign: "middle"
                is_focusable: True
                hint_text: lang.get('list_textinput_hint')
                font_size: 0.5 * self.height
                multiline: False
                write_tab: False

                on_text_validate:
                    root.create_list(self.text)
                    self.text = ""

<EntriesScreen>:
    name: 'entries_screen'
    orientation: 'vertical'
    on_pre_enter:
        root.refresh_entries()
        self.ids.current_list_lbl.text = "<--  " + root.current_list_name
    # TODO why do I need it?
    # on_pre_leave: self.ids.input_id.focus = False

    # Root
    BoxLayout:
        orientation: 'vertical'

        # Upper panel
        BoxLayout:
            id: entries_upper_panel_id
            orientation: 'horizontal'
            size_hint_y: None
            height: 50
            size_hint: 1, 0.1
            spacing: 2
            Button:
                id: current_list_lbl
                text: "<-  " + root.current_list_name
                font_size: config.get('font_size')
                size_hint: 0.6, 1
                on_release: root.manager.change_screen("lists_screen", "right")

            Button:
                id: revoke_btn_id
                text: lang.get('revoke_btn')
                size_hint: 0.2, 1
                font_size: config.get('font_size')
                disabled: True
                on_release: root.revoke_entry()
            Button:
                text: lang.get('tags_btn')
                size_hint: 0.2, 1
                font_size: config.get('font_size')
                disabled: True

        # Entries Panel
        ScrollView:
            BoxLayout:
                id: entries_panel_id
                size_hint: 1, None
                orientation: 'vertical'
                spacing: int(config.get('spacing'))
                padding: int(config.get('padding'))
                height: self.minimum_height
                size_hint_y: None

        # Bottom Panel
        BoxLayout:
            orientation: 'vertical'
            height: 50
            size_hint: 1, 0.07
            spacing: 2
            Chooser:
                id: input_id
                halign: "center"
                is_focusable: True
                hint_text: lang.get('entry_textinput_hint')
                font_size: 0.5 * self.height
                write_tab: False
                multiline: False
                on_text_validate:
                    root.create_entry(self.text)
                    self.text = ''

<SettingsScreen>:
    name: 'settings_screen'
    on_pre_enter: root.get_current_settings()
    # Root
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            BoxLayout:
                id: settings_panel_id
                size_hint: 1, None
                orientation: 'vertical'
                spacing: int(config.get('spacing'))
                padding: int(config.get('padding'))
                height: self.minimum_height

                Button:
                    text: lang.get('reset_db_btn')
                    height: "70dp"
                    size_hint: (1, None)
                    font_size: config.get('font_size')
                    on_release:
                        root.reset_db()

                Label:
                    size_hint: (1, None)
                    font_size: str(entries_font_size_slider_id.value) + 'dp'
                    text: lang.get('text_size_for_entries') + ' ' + str(int(entries_font_size_slider_id.value))
                    height: "35dp"
                    color: 0, 0, 0, 1
                Slider:
                    size_hint: (1, None)
                    height: "25dp"
                    id: entries_font_size_slider_id
                    value: int( config.get('entries_font_size')[:-2] )
                    range: (10,40)
                    step: 1
                    on_value: root.current_settings['entries_font_size'] =  str(self.value) + 'dp'

                Label:
                    size_hint: (1, None)
                    font_size: str(lists_font_size_slider_id.value) + 'dp'
                    text: lang.get('text_size_for_lists') + ' ' + str(int(lists_font_size_slider_id.value))
                    height: "35dp"
                    color: 0, 0, 0, 1
                Slider:
                    size_hint: (1, None)
                    height: "25dp"
                    id: lists_font_size_slider_id
                    value: int( config.get('lists_font_size')[:-2] )
                    range: (10,40)
                    step: 1
                    on_value: root.current_settings['lists_font_size'] =  str(self.value) + 'dp'

                Label:
                    size_hint: (1, None)
                    font_size: str(general_font_size_slider_id.value) + 'dp'
                    text: lang.get('general_text_size') + ' ' + str(int(general_font_size_slider_id.value))
                    height: "35dp"
                    color: 0, 0, 0, 1
                Slider:
                    size_hint: (1, None)
                    height: "25dp"
                    id: general_font_size_slider_id
                    value: int( config.get('font_size')[:-2] )
                    range: (10,40)
                    step: 1
                    on_value: root.current_settings['font_size'] =  str(self.value) + 'dp'

                Label:
                    size_hint: (1, None)
                    text: lang.get('suggestions_count_for_entries') + ' '  + str(int(max_suggestions_count_slider_id.value))
                    font_size: config.get('font_size')
                    height: "35dp"
                    color: 0, 0, 0, 1
                Slider:
                    size_hint: (1, None)
                    height: "30dp"
                    id: max_suggestions_count_slider_id
                    value: int(config.get('max_suggestions_count'))
                    range: (0,10)
                    step: 1
                    on_value: root.current_settings['max_suggestions_count'] =  str(int(self.value))

                # Padding
                Label:
                    size_hint: (1, None)
                    text: lang.get('padding')  + str(int(padding_slider_id.value))
                    font_size: config.get('font_size')
                    height: "35dp"
                    color: 0, 0, 0, 1
                Slider:
                    size_hint: (1, None)
                    height: "30dp"
                    id: padding_slider_id
                    value: int(config.get('padding'))
                    range: (0,15)
                    step: 1
                    on_value: root.current_settings['padding'] =  str(int(self.value))

                # Spacing
                Label:
                    size_hint: (1, None)
                    text: lang.get('spacing') + ' '  + str(int(spacing_slider_id.value))
                    font_size: config.get('font_size')
                    height: "35dp"
                    color: 0, 0, 0, 1
                Slider:
                    size_hint: (1, None)
                    height: "30dp"
                    id: spacing_slider_id
                    value: int(config.get('spacing'))
                    range: (0,15)
                    step: 1
                    on_value: root.current_settings['spacing'] =  str(int(self.value))

                Spinner:
                    height: "70dp"
                    size_hint: (1, None)
                    font_size: config.get('font_size')
                    text: lang.get('background:') + ' ' + root.current_settings['background_colour']
                    values: lang.get('background:') + ' ' + 'Orange', lang.get('background:') + ' ' + 'White'
                    on_text:  root.current_settings['background_colour'] = (self.text).rsplit(' ', 1)[1]
                Spinner:
                    height: "70dp"
                    size_hint: (1, None)
                    font_size: config.get('font_size')
                    text: lang.get('language:') + ' ' + root.current_settings['lang']
                    values: lang.get('language:') + ' ' +  'en', lang.get('language:') + ' ' +  'ru',
                    on_text:  root.current_settings['lang']  =  (self.text).rsplit(' ', 1)[1]

        # bottom panel
        BoxLayout:
            orientation: 'horizontal'
            spacing: 2
            height: 50
            size_hint: 1, 0.1

            Button:
                text: lang.get('back_btn')
                height: "70dp"
                font_size: config.get('font_size')
                on_release:
                    root.get_current_settings
                    root.manager.change_screen("lists_screen", "right")
            Button:
                text: lang.get('save_btn')
                height: "70dp"
                font_size: config.get('font_size')
                on_release:
                    root.apply_settings()
                    root.manager.change_screen("lists_screen", "right")
<ErrorPopup>:
    title: root.popup_title
    id: error_popup_id
    on_open: app.root.popupreference=self
    size_hint: 1, 0.4
    auto_dismiss: False
    BoxLayout:
        orientation: 'vertical'
        spacing: 10
        Label:
            text: root.error_text
        Button:
            text: lang.get('close_btn')
            font_size: config.get('font_size')
            height: "70dp"
            size_hint:(1, None)
            on_release:
                root.dismiss()

<ListEditPopup>
    id: list_edit_popup_id
    on_open: app.root.popupreference=self
    size_hint: 1, 0.4
    auto_dismiss: False
    BoxLayout:
        orientation: 'vertical'

        TextInput:
            id: list_name_id
            text: root.list_name
            halign: "center"
            is_focusable: True
            hint_text: lang.get('entry_textinput_hint')
            font_size: 0.5 * self.height
            write_tab: False
            multiline: False
            on_text_validate:
                root.rename_list(self.text)
                root.dismiss()
        Button:
            text: lang.get('delete_list')
            font_size: config.get('font_size')
            height: "70dp"
            size_hint:(1, None)
            on_release:
                root.delete_list()

        Button:
            text: lang.get('close_btn')
            font_size: config.get('font_size')
            height: "70dp"
            size_hint:(1, None)
            on_release:
                root.dismiss()
